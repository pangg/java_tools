<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd">

    <!--3. 开启springmvc注解模式-->
    <context:component-scan base-package="com.xxx.reader"/>
    <mvc:annotation-driven>
        <!--设置响应编码-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=utf-8</value>
                        <!--json序列化输出配置-->
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>

    </mvc:annotation-driven>
    <!--过滤静态资源-->
    <mvc:default-servlet-handler/>


    <!--5。配置freemaker模板引擎-->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl"/><!--读取模板引擎的位置-->
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">UTF-8</prop><!--采用utf-8的编码读取-->
            </props>
        </property>
        <!--
            @See https://www.cnblogs.com/question-sky/p/7235634.html
            preferFileSystemAccess属性默认为tru，默认为FileTemplateLoader加载器；
            设置preferFileSystemAccess=false，直接使用SpringTemplateLoader
        -->
        <property name="preferFileSystemAccess" value="false" />
    </bean>
    <bean id="ViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="suffix" value=".ftl"/>
    </bean>


    <!-- 数据库连接池 -->
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:db.properties" />
    <!-- MyBatis整合步骤：2。配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="maxActive" value="5" />
        <property name="minIdle" value="2" />
    </bean>

    <!-- 3。SqlSessionFactoryBean用于根据配置信息创建SqlSessionFactory，不再需要我们自己编码创建 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!--mybatis-plus-->
    <bean id="sessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!--写sql的配置文件-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
        <!-- 5。MyBatis配置文件地址 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>
    <!--4。配置mapper扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xxx.reader.mapper" />
    </bean>

    <!--6。声明式事务配置-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置Kaptcha-->
    <bean id="KaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!--验证码图片不生成边框-->
                        <prop key="kaptcha.border">no</prop>
                        <!--验证码图片宽度为120像素-->
                        <prop key="kaptcha.image.width">120</prop>
                        <!--验证码图片字体颜色为蓝色-->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <!--每个字符最大占用40xinags-->
                        <prop key="kaptcha.textproducer.font.size">40</prop>
                        <!--验证码包括4个字符-->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

</beans>