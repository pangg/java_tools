<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        bean id与name属性相同点：
            1。bean id与name都是设置对象在IoC容器中唯一标识；
            2。两者在同一个配置文件中都不允许重复出现；
            3。两者允许在多个配置文件中出现重复，新对象覆盖旧对象；
    -->

    <!--bean标签默认通过默认构造方法创建对象-->
    <bean id="apple1" class="com.xxx.spring.ioc1.entity.Apple">

    </bean>

    <!--使用带参构造方法实例化对象-->
    <bean id="apple2" class="com.xxx.spring.ioc1.entity.Apple">
        <!--IoC容器自动利用反射机制运行时调用setXXX方法为属性赋值-->
        <constructor-arg name="title" value="红富士" />
        <constructor-arg name="color" value="红色" />
        <constructor-arg name="origin" value="欧洲" />
        <constructor-arg name="price" value="19.8" />
    </bean>
    <bean id="apple3" class="com.xxx.spring.ioc1.entity.Apple">
        <constructor-arg index="0" value="红富士" />
        <constructor-arg index="1" value="红色" />
        <constructor-arg index="2" value="欧洲" />
    </bean>

    <!--利用静态工厂获取对象-->
    <bean id="apple4" class="com.xxx.spring.ioc2.factory.AppleStaticFactory" factory-method="createSweetApple" />

    <!--利用工厂实例方法获取对象-->
    <bean id="factoryInstance" class="com.xxx.spring.ioc2.factory.AppleFactoryInstance" />
    <bean id="apple5" factory-bean="factoryInstance" factory-method="createSweetApple" />

    <!--单个bean配置文件，相同name只能出现一次；其他配置文件可以出现相同name标识，但是会按照加载顺序，后加载覆盖之前加载的对象-->
    <!--一个Bean多个标识-->
    <bean name="apple6,name7" class="com.xxx.spring.ioc1.entity.Apple">

    </bean>

    <!--没有id与name的bean默认使用类名全称作为bean的标识-->
    <bean class="com.xxx.spring.ioc1.entity.Apple">
        <constructor-arg index="0" value="红富士" />
        <constructor-arg index="1" value="红色" />
        <constructor-arg index="2" value="欧洲" />
    </bean>


    <!--
        对象依赖注入：
            1。依赖注入是指运行时将容器内的对象利用反射赋给其他对象的操作
            2。基于setter方法注入对象
            3。基于构造方法注入对象
    -->

    <!--利用setter实现对象依赖注入-->
    <bean id="lilyObj" class="com.xxx.spring.ioc1.entity.Child">
        <property name="name" value="莉莉" />
        <!--利用ref注入依赖对象-->
        <property name="apple" ref="apple2" />
    </bean>
</beans>