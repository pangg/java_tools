<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userDao" class="com.xxx.spring.aop1.dao.UserDao" />
    <bean id="employeeDao" class="com.xxx.spring.aop1.dao.EmployeeDao" />
    <bean id="userService" class="com.xxx.spring.aop1.service.UserService">
        <property name="userDao" ref="userDao" />
    </bean>

    <bean id="employeeService" class="com.xxx.spring.aop1.service.EmployeeService">
        <property name="employeeDao" ref="employeeDao" />
    </bean>



    <!--AOP配置-->
    <bean id="methodAspect" class="com.xxx.spring.aop1.aspect.MethodAspect" />
    <aop:config>
        <!--PointCut 切点，使用execution表达式描述切面的作用范围-->
        <!--execution(public * com.xxx.spring.aop1..*.*(..)) 说明切面作用在com.xxx.spring.aop1包下的所有类的所有方法上 -->
        <!--<aop:pointcut id="pointcut" expression="execution(public * com.xxx.spring.aop1..*.*(..))" />--> <!--匹配com.xxx.spring.aop1包下的所有类的所有方法-->

        <aop:pointcut id="pointcut" expression="execution(public * com.xxx.spring.aop1..*Service.*(..))" />  <!--匹配com.xxx.spring.aop1包下的所有Service类的所有方法-->

        <!--<aop:pointcut id="pointcut" expression="execution(* com.xxx.spring.aop1..*Service.*(..))" />-->  <!--public通配符可以去掉-->

        <!--<aop:pointcut id="pointcut" expression="execution(void com.xxx.spring.aop1..*Service.*(..))" />-->  <!--无返回值的service类的所有方法进行捕获-->
        <!--<aop:pointcut id="pointcut" expression="execution(String com.xxx.spring.aop1..*Service.*(..))" />-->

        <!--<aop:pointcut id="pointcut" expression="execution(* com.xxx.spring.aop1..*Service.create*(..))" /> --> <!--匹配com.xxx.spring.aop1包下的所有Service类的以create开头的方法-->

        <!--<aop:pointcut id="pointcut" expression="execution(* com.xxx.spring.aop1..*Service.*())" />-->  <!--捕获无参数方法-->

        <!--<aop:pointcut id="pointcut" expression="execution(* com.xxx.spring.aop1..*Service.*(*,*))" />-->  <!--捕获两个参数的数方法-->
        <!--<aop:pointcut id="pointcut" expression="execution(* com.xxx.spring.aop1..*Service.*(String,*))" />-->  <!--捕获两个参数的数方法-->

        <!--定义切面类-->
        <!--
            输出日志的产生会 与 下面各种通知的配置顺序一致
        -->
        <aop:aspect ref="methodAspect">
            <!--before通知，代表在目标方法运行前先执行methodAspect.printExecutionTime()-->
            <aop:before method="printExecutionTime" pointcut-ref="pointcut" />

            <!--returning="ret" 将返回值注入参数ret-->
            <aop:after-returning method="doAfterReturning" returning="ret" pointcut-ref="pointcut" />

            <aop:after method="doAfter" pointcut-ref="pointcut" />

            <!--throwing="th" 将执行的异常信息注入到参数th中-->
            <aop:after-throwing method="doAfterThrowing" throwing="th" pointcut-ref="pointcut" />

            <!--环绕通知-->
            <aop:around method="roundCheck" pointcut-ref="pointcut" />
        </aop:aspect>
    </aop:config>

</beans>